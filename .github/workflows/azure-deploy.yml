name: CI/CD for Avy I Azure App Service

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
  pull_request:
    branches:
      - main
    paths:
      - 'backend/**'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN }}
      FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
      SCADA_POLL_INTERVAL: ${{ secrets.SCADA_POLL_INTERVAL }}
      RATE_LIMIT_WINDOW_MS: ${{ secrets.RATE_LIMIT_WINDOW_MS }}
      RATE_LIMIT_MAX: ${{ secrets.RATE_LIMIT_MAX }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.5.0'
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'
          
      - name: Install dependencies
        run: |
          cd backend
          npm ci
          
      - name: Update Prisma Schema for Cross-Platform Support
        run: |
          cd backend
          # Add Linux binary target for Azure App Service (Linux containers)
          if ! grep -q "binaryTargets" prisma/schema.prisma; then
            # Add binaryTargets if it doesn't exist
            sed -i '/generator client {/,/}/ s/output   = "\.\.\/src\/generated\/prisma-client"/output   = "..\/src\/generated\/prisma-client"\n  binaryTargets = ["native", "linux-musl"]/' prisma/schema.prisma
          else
            # Update existing binaryTargets to include linux-musl
            sed -i 's/binaryTargets = \[.*\]/binaryTargets = ["native", "linux-musl"]/' prisma/schema.prisma
          fi
          
          # Verify the update
          echo "Updated Prisma schema generator block:"
          grep -A 5 "generator client" prisma/schema.prisma
          
      - name: Generate Prisma Client
        run: |
          cd backend
          npx prisma generate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
      
      - name: Run Prisma migrations
        run: |
          cd backend
          npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          
      - name: Build TypeScript
        run: |
          cd backend
          npm run build
      
      - name: Verify and Copy Prisma Client to dist
        run: |
          cd backend
          
          # Verify that Prisma client was generated correctly
          if [ -d "src/generated/prisma-client" ]; then
            echo "Prisma client found in src/generated/prisma-client"
            ls -la src/generated/prisma-client/
          else
            echo "Prisma client not found in expected location"
            echo "Looking for Prisma client in alternative locations..."
            find . -name "*prisma*" -type d 2>/dev/null
            exit 1
          fi
          
          # Ensure target directory structure exists
          mkdir -p dist/src/generated/prisma-client
          
          # Copy the generated Prisma client to the correct nested structure
          cp -r src/generated/prisma-client/* dist/src/generated/prisma-client/
          
          # Verify copy was successful with correct structure
          if [ -d "dist/src/generated/prisma-client" ] && [ "$(ls -A dist/src/generated/prisma-client)" ]; then
            echo "Prisma client copied to dist with correct structure"
            echo "Files in dist/src/generated/prisma-client:"
            ls -la dist/src/generated/prisma-client/
          else
            echo "Failed to copy Prisma client to correct structure"
            exit 1
          fi

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push Docker image
      - name: Build and Push Docker Image
        run: |
          cd backend
          IMAGE_NAME=chiranjeevichetan/avyi-app
          IMAGE_TAG=v${{ github.run_number }}
          
          echo "Building Docker image: $IMAGE_NAME:$IMAGE_TAG"
          docker build -t $IMAGE_NAME:$IMAGE_TAG .
          docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:latest
          
          echo "Pushing Docker image to Docker Hub..."
          docker push $IMAGE_NAME:$IMAGE_TAG
          docker push $IMAGE_NAME:latest
          
          echo "Docker image pushed successfully"
          echo "Image: $IMAGE_NAME:$IMAGE_TAG"

  deploy:
    needs: build
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
      # Deploy to Azure App Service
      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: "avyi-server"
          slot-name: "production"
          images: "chiranjeevichetan/avyi-app:v${{ github.run_number }}"
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}

      # # Configure App Service Environment Variables
      # - name: Configure Azure App Service Settings
      #   uses: azure/CLI@v1
      #   with:
      #     azcliversion: 2.30.0
      #     inlineScript: |
      #       # Set environment variables in Azure App Service
      #       az webapp config appsettings set \
      #         --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
      #         --name "avyi-server" \
      #         --settings \
      #           DATABASE_URL="${{ secrets.DATABASE_URL }}" \
      #           JWT_SECRET="${{ secrets.JWT_SECRET }}" \
      #           JWT_EXPIRES_IN="${{ secrets.JWT_EXPIRES_IN }}" \
      #           FRONTEND_URL="${{ secrets.FRONTEND_URL }}" \
      #           SCADA_POLL_INTERVAL="${{ secrets.SCADA_POLL_INTERVAL }}" \
      #           RATE_LIMIT_WINDOW_MS="${{ secrets.RATE_LIMIT_WINDOW_MS }}" \
      #           RATE_LIMIT_MAX="${{ secrets.RATE_LIMIT_MAX }}" \
      #           NODE_ENV="production" \
      #           PORT="8080" \
      #           WEBSITES_PORT="8080"
            
      #       echo "Environment variables configured successfully"

      # Health Check
      - name: Health Check
        run: |
          echo "Waiting 60 seconds for application to fully start up..."
          sleep 60
          
          # Health check with retry logic
          max_attempts=10
          attempt=0
          health_url="https://avyi-server.azurewebsites.net/health"
          
          echo "Starting health check for: $health_url"
          
          while [ $attempt -lt $max_attempts ]; do
            attempt=$((attempt + 1))
            echo "Health check attempt $attempt/$max_attempts..."
            
            if response=$(curl -s -w "%{http_code}" -o /tmp/health_response.json "$health_url" --max-time 30); then
              http_code="${response: -3}"
              if [ "$http_code" = "200" ]; then
                echo "Health check passed on attempt $attempt"
                echo "Response:"
                cat /tmp/health_response.json | jq . 2>/dev/null || cat /tmp/health_response.json
                echo ""
                echo "Deployment completed successfully!"
                exit 0
              else
                echo "Health check failed with HTTP code: $http_code"
                echo "Response body:"
                cat /tmp/health_response.json 2>/dev/null || echo "No response body"
              fi
            else
              echo "Health check request failed (curl error)"
            fi
            
            if [ $attempt -lt $max_attempts ]; then
              echo "Waiting 15 seconds before next attempt..."
              sleep 15
            fi
          done
          
          echo "Health check failed after $max_attempts attempts"
          echo "Deployment completed, but health check failed. Check the application manually at:"
          echo "https://avyi-server.azurewebsites.net"
          exit 1